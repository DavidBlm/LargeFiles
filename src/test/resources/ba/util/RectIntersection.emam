package ba.util;

component RectIntersection{
    //TODO: make rect type clearer. Current: 4 points going clockwise around the rect
    ports in Q^{2,4} rect1,
          in Q^{2,4} rect2,
          out B collision;

    //check intersection of 4*4 lines w/o permutations
    //4*(4+1)/2 = 10 possibilities

    instance RectToLines rectToLines1;
    instance RectToLines rectToLines2;

    instance LineIntersection lineIntersection[10];
    instance MultiOr<10> multiOr;

    connect rect1 -> rectToLines1.rect;
    connect rect2 -> rectToLines2.rect;

    connect rectToLines1.lineA -> lineIntersection[1].lineA;
    connect rectToLines2.lineA -> lineIntersection[1].lineB;

    connect rectToLines1.lineA -> lineIntersection[2].lineA;
    connect rectToLines2.lineB -> lineIntersection[2].lineB;

    connect rectToLines1.lineA -> lineIntersection[3].lineA;
    connect rectToLines2.lineC -> lineIntersection[3].lineB;

    connect rectToLines1.lineA -> lineIntersection[4].lineA;
    connect rectToLines2.lineD -> lineIntersection[4].lineB;

    connect rectToLines1.lineB -> lineIntersection[5].lineA;
    connect rectToLines2.lineB -> lineIntersection[5].lineB;

    connect rectToLines1.lineB -> lineIntersection[6].lineA;
    connect rectToLines2.lineC -> lineIntersection[6].lineB;

    connect rectToLines1.lineB -> lineIntersection[7].lineA;
    connect rectToLines2.lineD -> lineIntersection[7].lineB;

    connect rectToLines1.lineC -> lineIntersection[8].lineA;
    connect rectToLines2.lineC -> lineIntersection[8].lineB;

    connect rectToLines1.lineC -> lineIntersection[9].lineA;
    connect rectToLines2.lineD -> lineIntersection[9].lineB;

    connect rectToLines1.lineD -> lineIntersection[10].lineA;
    connect rectToLines2.lineD -> lineIntersection[10].lineB;

    connect lineIntersection[:].intersects -> multiOr.boolIn[:];
    connect multiOr.boolOut -> collision;
}